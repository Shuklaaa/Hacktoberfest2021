fixes-#1628
public class Knapsack01 {
    public static int knapsack(int[] values, int[] weights, int capacity) {
        int n = values.length;
        int[][] dp = new int[n + 1][capacity + 1];

        for (int i = 0; i <= n; i++) {
            for (int w = 0; w <= capacity; w++) {
                if (i == 0 || w == 0) {
                    dp[i][w] = 0; // Base case: no items or no capacity
                } else if (weights[i - 1] <= w) {
                    int includedValue = values[i - 1] + dp[i - 1][w - weights[i - 1]];
                    int notIncludedValue = dp[i - 1][w];
                    dp[i][w] = Math.max(includedValue, notIncludedValue);
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        return dp[n][capacity];
    }

    public static void main(String[] args) {
        int[] values = {60, 100, 120};
        int[] weights = {10, 20, 30};
        int capacity = 50;
        int max_value = knapsack(values, weights, capacity);
        System.out.println("Maximum value: " + max_value);
    }
}
