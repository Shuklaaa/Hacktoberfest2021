bool pnt(vector<int>adj[],int c[],int st){
         c[st]=0;
         queue<int>q;
         q.push(st);
         while(!q.empty()){
             int node=q.front();
             q.pop();
             for(auto it:adj[node]){
                 if(c[it]==-1){
                 c[it]=!c[node];
                 q.push(it);
                 }
                 else if(c[it]==c[node])
                 return false;
                 
             }
         }
         return true;
    }
    bool possibleBipartition(int n, vector<vector<int>>& dk) {
        vector<int>adj[n+1];
        for(int i=0;i<dk.size();i++){
            int u=dk[i][0],v=dk[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int c[n+1];
        for(int i=0;i<=n;i++)
        c[i]=-1;
        for(int i=1;i<=n;i++){
            if(c[i]==-1){
            if(!pnt(adj,c,i))
            return false;
            }
        }
        return true;
    }
