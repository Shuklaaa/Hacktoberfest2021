int findCheapestPrice(int n, vector<vector<int>>& ft, int src, int dst, int k){
        vector<pair<int,int>>adj[n];
        for(int i=0;i<ft.size();i++){
            int u=ft[i][0],v=ft[i][1],c=ft[i][2];
            adj[u].push_back({v,c});
            
        }
        queue<pair<int,pair<int,int>>>q;
        vector<int>dist(n,1e9);
        dist[src]=0;
        q.push({0,{src,0}});
        while(!q.empty()){
            int stop=q.front().first;
            int node=q.front().second.first;
            int cost=q.front().second.second;
            
            q.pop();
            if(stop>k)
            continue;
            for(auto it:adj[node]){
                int adjnode=it.first;
                int price=it.second;
                if(stop<=k and price+cost<dist[adjnode]){
                    dist[adjnode]=price+cost;
                    q.push({stop+1,{adjnode,dist[adjnode]}});
                }
            }
        }
        if(dist[dst]!=1e9)
        return dist[dst];
        else
        return -1;
    }
