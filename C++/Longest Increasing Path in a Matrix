int help(vector<vector<int>>& mat,vector<vector<int>>&dp,int r,int c){
        int m=mat.size(),n=mat[0].size();
        int mx=0;
        for(int i=-1;i<=1;i++){
            for(int j=-1;j<=1;j++){
                if(i==0 || j==0){
                    int x=i+r,y=j+c;
                    if(x>=0 and x<m and y>=0 and y<n and mat[x][y]>mat[r][c]){
                    if(dp[x][y])
                    mx=max(mx,dp[x][y]);
                    else{
                        dp[x][y]=help(mat,dp,x,y);
                        mx=max(mx,dp[x][y]);
                    }
                    }
                }
            }
        }
        return dp[r][c]=1+mx;

    }
    int longestIncreasingPath(vector<vector<int>>& mat) {
        int maxi=1;
        int m=mat.size(),n=mat[0].size();
        vector<vector<int>>dp(m,vector<int>(n));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                maxi=max(maxi,help(mat,dp,i,j));
            }
        }
        return maxi;
    }
